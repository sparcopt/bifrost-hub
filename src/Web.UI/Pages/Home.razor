@page "/"
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size
@using BifrostHub.Application.Features.GameEvents.Dto
@using BifrostHub.Application.Features.Players.Dto
@using BifrostHub.Application.Features.Players.EnrichOnlinePlayer
@using BifrostHub.Application.Features.Players.GetOnlinePlayers
@using BifrostHub.Application.Features.ServerDetails.Dto
@using BifrostHub.Application.Features.ServerDetails.GetServerDetails
@using BifrostHub.Application.Features.WorldDetails.Dto
@using BifrostHub.Application.Features.WorldDetails.GetWorldDetails
@using Wolverine
@using BifrostHub.Application.Features.GameEvents
@inject IGameActivityConsumer gameActivityConsumer
@inject IMessageBus mediator
@implements IDisposable

<PageTitle>Dashboard</PageTitle>

<MudGrid Justify="Justify.SpaceEvenly" Class="mb-2">
    <MudItem sm="3" xs="12">
        <MudPaper Class="mud-paper mud-elevation-1 py-4 px-6 rounded-lg d-flex align-center">
            <MudPaper Class="pa-1" Elevation="0" Style="background-color: var(--mud-palette-tertiary-darken)">
                <MudIcon Icon="@Icons.Material.Filled.Cable" Size="Size.Large"/>
            </MudPaper>
            <MudStack Class="flex-grow-1 ml-3" Spacing="0">
                <MudText Typo="Typo.body2" Class="grey-text text-darken-1" Style="font-weight: bold;">Server status</MudText>
                <MudText Typo="Typo.h5">Online</MudText>
            </MudStack>
        </MudPaper>
    </MudItem>
    <MudItem sm="3" xs="12">
        <MudPaper Class="mud-paper mud-elevation-1 py-4 px-6 rounded-lg d-flex align-center">
            <MudPaper Class="pa-1" Elevation="0" Style="background-color: var(--mud-palette-tertiary-darken)">
                <MudIcon Icon="@Icons.Material.Filled.People" Size="Size.Large"/>
            </MudPaper>
            <MudStack Class="flex-grow-1 ml-3" Spacing="0">
                <MudText Typo="Typo.body2" Class="grey-text text-darken-1" Style="font-weight: bold">Online players</MudText>
                <MudText Typo="Typo.h5">@players.Count()/@serverDetails?.MaxNumberOfPlayers</MudText>
            </MudStack>
        </MudPaper>
    </MudItem>
    <MudItem sm="3" xs="12">
        <MudPaper Class="dmud-paper mud-elevation-1 py-4 px-6 rounded-lg d-flex align-center">
            <MudPaper Class="pa-1" Elevation="0" Style="background-color: var(--mud-palette-tertiary-darken)">
                <MudIcon Icon="@GetDayTimeIcon()" Size="Size.Large"/>
            </MudPaper>
            <MudStack Class="flex-grow-1 ml-3" Spacing="0">
                <MudText Typo="Typo.body2" Class="grey-text text-darken-1" Style="font-weight: bold">Day time</MudText>
                <MudText Typo="Typo.h5">@worldDetails?.DayCycle?.ToUpper()</MudText>
            </MudStack>
        </MudPaper>
    </MudItem>
    <MudItem sm="3" xs="12">
        <MudPaper Class="dmud-paper mud-elevation-1 py-4 px-6 rounded-lg d-flex align-center">
            <MudPaper Class="pa-1" Elevation="0" Style="background-color: var(--mud-palette-tertiary-darken)">
                <MudIcon Icon="@Icons.Material.Filled.Today" Size="Size.Large"/>
            </MudPaper>
            <MudStack Class="flex-grow-1 ml-3" Spacing="0">
                <MudText Typo="Typo.body2" Class="grey-text text-darken-1" Style="font-weight: bold">Current day</MudText>
                <MudText Typo="Typo.h5">@worldDetails?.DayNumber</MudText>
            </MudStack>
        </MudPaper>
    </MudItem>
</MudGrid>

<MudGrid Class="mb-2" Style="height: 350px">
    <MudItem xs="12" sm="6" Class="d-flex flex-column">
        <MudPaper Class="pa-4 flex-grow-1 rounded-lg">
            <MudText Typo="Typo.h5">Online players</MudText>
            <MudStack Class="flex-grow-1">
                @foreach (var player in players)
                {
                    <MudPaper Elevation="0" Class="dmud-paper gap-2 rounded-lg d-flex align-center" Style="background-color: var(--mud-palette-dark)">
                        <MudImage Src="@player.SteamAvatarPath" Width="70"/>
                        <MudStack Spacing="0" Style="width: 50%;">
                            <MudText Typo="Typo.h6">@player.Name</MudText>
                            <MudText Typo="Typo.caption">Exploring Valheim</MudText>
                        </MudStack>
                        <MudStack Spacing="0" Class="flex-grow-1 mr-3">
                            <MudText Typo="Typo.caption">HP: @player.GetHealthAsInteger()/@player.GetMaxHealthAsInteger()</MudText>
                            <MudProgressLinear Color="Color.Error" Rounded="true" Size="Size.Small" Value="@player.GetHealthPercentage()"/>
                            <MudText Typo="Typo.caption">STA: @player.GetStaminaAsInteger()</MudText>
                            @* <MudProgressLinear Color="Color.Tertiary" Rounded="true" Size="Size.Small" Value="25"/> *@
                        </MudStack>
                    </MudPaper>
                }
            </MudStack>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" Class="d-flex flex-column">
        <MudPaper Class="d-flex flex-column flex-grow-1 dmud-paper mud-elevation-1 py-4 px-6 rounded-lg">
            <MudText Typo="Typo.h5">Chat</MudText>
            @* <MudPaper Elevation="0" Class="flex-grow-1 dmud-paper gap-2 rounded-lg d-flex align-center" Style="background-color: var(--mud-palette-dark)" /> *@
        </MudPaper>
    </MudItem>
</MudGrid>

<MudPaper Class="mud-paper mud-elevation-1 py-4 px-6 rounded-lg d-flex flex-column" Style="height: 350px;">
    <MudText Typo="Typo.h5">Events</MudText>
    <MudSimpleTable Elevation="0" Style="overflow-x: auto;">
        
        <tbody>
        @foreach (var gameEvent in gameEvents)
        {
            <tr>
                <td>@gameEvent.CreatedDate</td>
                <td>@gameEvent.Message</td>
            </tr>
        }
        </tbody>
    </MudSimpleTable>
</MudPaper>

@code {

    private ServerDetails serverDetails;
    private List<OnlinePlayer> players = new();
    private WorldDetails worldDetails;
    private Stack<GameEvent> gameEvents = new();

    protected override async Task OnInitializedAsync()
    {
        gameActivityConsumer
            .OnGameEventReceived(async gameEvent =>
            {
                await InvokeAsync(async () =>
                {
                    if (gameEvent.Type == EventType.PlayerSpawn)
                    {
                        if (players.All(p => p.Id != gameEvent.Player.Id))
                        {
                            var player = gameEvent.Player.ToDto();
                            var command = new EnrichOnlinePlayerCommand(player);
                            var playerEnriched = await mediator.InvokeAsync<OnlinePlayer>(command);
                            players.Add(playerEnriched);
                        }
                    }

                    if (gameEvent.Type == EventType.PlayerDisconnect)
                    {
                        var player = players.First(p => p.Id == gameEvent.Player.Id);
                        players.Remove(player);
                    }

                    gameEvents.Push(gameEvent);
                    StateHasChanged();
                });
            })
            .OnGameStatsSnapshotReceived(snapshot =>
            {
                InvokeAsync(() =>
                {
                    UpdatePlayerStats(snapshot);
                    StateHasChanged();
                });
            });

        var serverDetailsTask = mediator.InvokeAsync<ServerDetails>(new GetServerDetailsQuery());
        var worldDetailsTask = mediator.InvokeAsync<WorldDetails>(new GetWorldDetailsQuery());
        var playersTask = mediator.InvokeAsync<IEnumerable<OnlinePlayer>>(new GetOnlinePlayersQuery());
        await Task.WhenAll(serverDetailsTask, worldDetailsTask, playersTask);
        serverDetails = serverDetailsTask.Result;
        worldDetails = worldDetailsTask.Result;
        players = playersTask.Result.ToList();
    }

    private void UpdatePlayerStats(GameStatsSnapshot gameStatsSnapshot)
    {
        if (players.Any())
        {
            foreach (var playerStats in gameStatsSnapshot.PlayerStats)
            {
                var player = players.FirstOrDefault(p => p.Id == playerStats.Id);
                player?.UpdateStats(playerStats.Health, playerStats.MaxHealth, playerStats.Stamina);
            }
        }
    }

    private string GetDayTimeIcon()
    {
        var dayCycle = worldDetails?.DayCycle;
        return dayCycle == "day" ? Icons.Material.Filled.WbSunny : Icons.Material.Filled.Nightlight;
    }

    public void Dispose()
    {
        gameActivityConsumer.Dispose();
    }
}